from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω–∏–º –≤ –ø–∞–º—è—Ç–∏
chats_data = {}  # { chat_id: { "budget": float, "spent_total": float, "users": { user_id: {"name": str, "spent": float} } } }

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –±—é–¥–∂–µ—Ç–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/set_budget <—Å—É–º–º–∞> ‚Äî –∑–∞–¥–∞—Ç—å –±—é–¥–∂–µ—Ç\n"
        "/status ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "/top ‚Äî —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Ç—Ä–∞—Ç–∞–º\n"
        "/reset_budget ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –±—é–¥–∂–µ—Ç\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ."
    )

async def set_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Å—É–º–º—É: /set_budget 10000")
        return

    try:
        amount = float(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /set_budget 10000")
        return

    chat_id = update.message.chat_id
    chats_data[chat_id] = {"budget": amount, "spent_total": 0, "users": {}}

    await update.message.reply_text(f"‚úÖ –ë—é–¥–∂–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {amount}")

async def add_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text)
    except ValueError:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º

    chat_id = update.message.chat_id
    user_id = update.message.from_user.id
    user_name = update.message.from_user.full_name

    if chat_id not in chats_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ –±—é–¥–∂–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π /set_budget")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–∞—Ç—ã
    chats_data[chat_id]["spent_total"] += amount
    if user_id not in chats_data[chat_id]["users"]:
        chats_data[chat_id]["users"][user_id] = {"name": user_name, "spent": 0}
    chats_data[chat_id]["users"][user_id]["spent"] += amount

    remaining = chats_data[chat_id]["budget"] - chats_data[chat_id]["spent_total"]

    await update.message.reply_text(
        f"‚úÖ {user_name} –¥–æ–±–∞–≤–∏–ª —Ç—Ä–∞—Ç—É {amount}\n"
        f"–û—Å—Ç–∞—Ç–æ–∫ –±—é–¥–∂–µ—Ç–∞: {remaining}"
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if chat_id not in chats_data:
        await update.message.reply_text("–ë—é–¥–∂–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    data = chats_data[chat_id]
    text = (
        f"üìä –ë—é–¥–∂–µ—Ç: {data['budget']}\n"
        f"üí∏ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {data['spent_total']}\n"
        f"–û—Å—Ç–∞—Ç–æ–∫: {data['budget'] - data['spent_total']}\n\n"
        f"–¢—Ä–∞—Ç—ã –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º:\n"
    )

    for user in data["users"].values():
        text += f"- {user['name']}: {user['spent']}\n"

    await update.message.reply_text(text)

async def top(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if chat_id not in chats_data or not chats_data[chat_id]["users"]:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç—Ä–∞—Ç–∞–º.")
        return

    sorted_users = sorted(chats_data[chat_id]["users"].values(), key=lambda x: x["spent"], reverse=True)
    text = "üèÜ –¢–û–ü —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Ç—Ä–∞—Ç–∞–º:\n"
    for idx, user in enumerate(sorted_users, start=1):
        text += f"{idx}. {user['name']} ‚Äî {user['spent']}\n"

    await update.message.reply_text(text)

async def reset_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    chats_data[chat_id] = {"budget": 0, "spent_total": 0, "users": {}}
    await update.message.reply_text("‚úÖ –ë—é–¥–∂–µ—Ç —Å–±—Ä–æ—à–µ–Ω!")

app = ApplicationBuilder().token("8220413192:AAGupQhhdCxuZmrEwTHkOHjg2v9QcEkxDrU").build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("set_budget", set_budget))
app.add_handler(CommandHandler("status", status))
app.add_handler(CommandHandler("top", top))
app.add_handler(CommandHandler("reset_budget", reset_budget))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense))

print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ñ–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã...")  # <-- –¥–æ–±–∞–≤–∏–ª–∏
app.run_polling()